-props: props are Properties, Passing a prop to a component is same as passing a argument to a function.

1. When we have to dynamically pass in some data to a component we pass in as a prop.

// swiggy restaurant image
https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_660/RX_THUMBNAIL/IMAGES/VENDOR/2024/9/18/2fb56c16-5ba2-4f29-a978-e059399f8c37_30237.jpg

// Swiggy API
https://www.swiggy.com/dapi/restaurants/list/v5/?lat=12.9351929&lng=77.62448069999999&page_type=DESKTOP_WEB_LISTING

// bhayandar API

https://www.swiggy.com/mapi/homepage/getCards?lat=19.306523036370468&lng=72.86280434578657&page_type=DESKTOP_WEB_LISTING

setListOfRestaurants(json?.data?.success?.cards[4]?.gridWidget?.gridElements?.infoWit hStyle?.restaurants)

- config driven UI: All the UI is driven by the config (data) the data can be different for any circumstances, we can control the UI from the Backend.(specially used for different locations different data)

<!-- key while looping -->

- why key is important when using map: when components have childrens they have same level components they should be uniquely represented, because when we do not use key property react does not get to know which new set of data is added in the array and it will re-render all the data which is not a good practice for performance and optimization, that is why key is important so that react should know which data is newly added and only render that set of data.

- why using index as a key is a bad practice: It works fine as soon as we add a new child component, react gets confused about which properties belonged to which map component. so key={index} is not recommended itself by react official.

- not using keys (not acceptable) <<<<<< index as key <<<<< unique id (best practice)

<!-- two types of export -->z

<!-- default -->

1. export default Header;

<!-- named export -->

2. when you have to export multiple things in a components file than we use named export. It is basically writing export in front of const or variable, because there cannot be two default in a file.

if we use named export then while importing it should be like this,
import {CDN_URL} from "../utils/constants"

And also we can use name export and default export in the same file.

<!-- React Hooks -->

(Normal Js utility functions)

- useState() - Superpowerful State variables in react
- useEffect()

<!-- import useState -->

import {useState} from "react";

<!-- Local State Variable - Superpowerful variable  -->

const [listItems] = useState([]);

<!-- Array destructuring -->

// OR
const arr = useState(resList);
const [listItems, setListItems] = arr;

// OR
const arr = useState(resList);
const listItems = arr[0]
const setListItems = arr[1]

<!-- Normal Js Variable -->

let listOfRestaurants = []

<!-- whenever a state variable updates, react rerenders the components  -->

<!-- React keeps our UI sync with data layer in data layer when you have a local state variable as soon as your data layer updates, your UI layer will update by re-rendering the components in a very less code and optimized way, also with super fast DOM operations and efficiency -->

<!-- React is very good at DOM operations -->

<!-- Reconciliation Algorithm -->

When something changes in the UI is known as reconciliation,The algorithm React uses to diff one tree with another to determine which parts need to be changed.A change in the data used to render a React app. Usually the result of `setState`. Eventually results in a re-render.

<!-- Virtual DOM -->

Virtual DOM: Virtal DOM is a representation of actual DOM. It is kind of nothing but a JS object. React is doing Efficient Dom manipulation.

<!-- Diffing Algorithm -->

Diffing Algorithm finds out the difference between updated virtual dom and previous virtual dom, and then actually updates the dom on every render cycle.

<!-- React Fiber -->

Incremental Rendering: The ability to split rendering work into chunks and spread out over multiple frames.

<-- useEffect() -->

It takes two arguments first is a callback function and second is a dependency array.

If no dependency array => useEffect is called on every render.
If dependency array is empty = [] => useEffect is called on initial render(just once)
If dependency array is [btnNameReact] => called everytime btnNameReact is updated.

// Optional Chaining
setListOfRestaurants(json?.data?.cards[4]?.card?.card?.gridElements?.infoWithStyle?.restaurants)

The optional chaining (?.) operator accesses an object's property or calls a function. If the object accessed or function called using this operator is undefined or null, the expression short circuits and evaluates to undefined instead of throwing an error.

// Conditional Rendering
if (ListOfRestaurants.length === 0) {
return <Shimmer />
}

In React, you can create distinct components that encapsulate behavior you need. Then, you can render only some of them, depending on the state of your application.

Conditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like if or the conditional operator to create elements representing the current state, and let React update the UI to match them.

<!-- Shimmer UI -->

A better way to show loading states is to use a shimmer UI. A shimmer UI is a version of the UI that doesn't contain actual content, but instead mimics the layout and shapes of the content that will eventually appear. It uses a gradient animation that creates a shimmering effect over the placeholders, giving the user a sense of motion and progress.

<!-- why local state variable is advanced over normal variable   -->

when you try to update the normal variable in onclick function you will end up getting no changes bcoz it won't let us so in here useState help with const variable and two arguments it re-renders the whole component so const has a principle of not letting the data change but here the whole reconciliation cycle gets updates so no problem in const

whenever state variables update, react triggers a reconciliation cycle(re-renders the component)

<!-- cors plugin -->

CORS: Cross Origin Resources Sharing
It bypasses the cors issue.

.Use Another Public CORS Proxy
There are other public CORS proxies that you can try, such as:
https://cors-anywhere.herokuapp.com/
https://api.allorigins.win/get?url=
https://thingproxy.freeboard.io/fetch/

<!-- Hooks -->

// A hook should be created inside a component always, bcoz the purpose is to create local state variable inside functional component and use the hooks at the top also good for synchronours single threaded language.

// Never use hooks inside if else statements, functions and for loops, it can create inconsistency, bcoz the state variable are meant to be created inside function component and on the higher level.

<!-- Routes -->

npm i react-router-dom

import { createBrowserRouter, RouterProvider, Outlet } from "react-router-dom";

root.render(<RouterProvider router={AppRouter} />)

<!-- Rafce -->

It is a shortcut to create boilerplate component.

<!-- Error page -->

import Error from "./components/Error";

errorElement: <Error />

<!-- useRouteError -->

import {useRouteError} from "react-router-dom";

<!-- children routes -->

Outlet replace itself with the route page

children: [
{
path: "/",
element: <Body />,
}, {
path: "/about",
element: <About />,
}, {
path: "/contact",
element: <Contact />,
}
],

// Our applications are known as single page applications. New Pages are just components interchanging themselves. Everything is component in react.

<!-- Two types of routing -->

// Client side Routing
In traditional websites, the browser requests a document from a web server, downloads and evaluates CSS and JavaScript assets, and renders the HTML sent from the server. When the user clicks a link, it starts the process all over again for a new page.

Client side routing allows your app to update the URL from a link click without making another request for another document from the server. Instead, your app can immediately render some new UI and make data requests with fetch to update the page with new information.

Client side routing is enabled by creating a Router and linking/submitting to pages with <Link> and <Form>

// Server side Routing

Server-side routing is a traditional approach to handling routes in web applications. It involves the server sending a response based on the URL path that the user is visiting

<!-- Dynamic Routing -->

<!-- Install react-router-dom -->

// npm i react-router-dom

<!-- https://swiggy.com/dapi/menu/pl?page-type-REGULAR_MENU&complete-menu=true&lat=12.9351929&lng=77.62448069999999&restaurantId-425&submitAction=ENTER -->

<!-- Link  -->

// Link is a wrapper over anchor tag.
// Using Link instead of anchor is beneficial coz it won't reload the whole page.

<!-- class components -->

// never directly update state variables.

// when you update one element of state variable in setState the other element will remain still.

<!-- React.component / Component -->

//if used React.Component then the import should be import React from "react";

// if used Component then the import will be import {Component} from "react";

<!-- Super -->

// Accessing this in the Constructor: In JavaScript, you can't use this in a constructor until you've called the parent's constructor with super(). React components extend from React.Component, so you must call super() first if you want to access this in your componentâ€™s constructor. Without calling super(), you would not be able to use this to refer to the component instance in the constructor.

<!-- Parent and child in class component -->

// The sequence goes like this, First the Parent constructor is called then the Parent render is called as soon the parent render is called it will call child constructor and child render after that now the component is mounted so the ComponentDidMount is called of the Child and afterwards Parent's ComponentDidMount will be called.

<!-- LifeCycle -->

// Render phase: First the Parent constructor is called then parent render is called after that first child constructor and render is called same for the another and many more children.

// Commit Phase: Once the commit phase starts react tries to update the dom and dom manipulation is the most expensive thing when we are updating a component.

// Render phase is just virtual dom it finds the diff and when it tries to update the dom it batches all the children's and later on commit phase happens which means first child Component did mount then second child and so on and afterwards parent Component did mount.(it is done like this for optimization and Dom is expensive in time so batch the low phase(render) and high phase(render))

<!-- we can use async in componentDidMount() -->

<!--
render phase

-Parent Constructor
 -Parent render

   -First Constructor
    -First Render

    -Second Constructor
    -Second Render

commit phase
<DOM UPDATED - IN SINGLE BATCH>

    -First ComponentDidMount
     -Second ComponentDidMount

 -Parent ComponentDidMount
-->

// Mounting Cycle and Update cycle

<!--
    -- Mounting Cycle--

    Constructor(dummy)
    Render(dummy)
        <HTML Dummy>
        Component Did Mount
        <API call>
        this.setState -> State variable is updated

        --UPDATE Cycle--

        render(API data)
        <HTML (new API data)>
        Component did Update

        -- UmMounting--

        componentWillUnMount() - It happens when we leave the page.

 -->

// ComponentDidUpdate

// componentDidUpdate (prevProps, prevState) {
// if (
// this.state.count prevState.count ||
// this.state.count prevState.count
// ) {
code
// console.log("Component Did Update");
// }

now what we do in useEffect((=>{

},[]))
Earlier coders use to do that on Component did update. with if else statement that is why in currect useEffect we have array as a dependency array.

<!-- componentDidMount -->

In here if we use a setInterval of 1000ms so after every 1s the setInterval will trigger so we have clear this up so for that we use componentWillUnmount, though it is a single page application(spa) it will still work when we go to other component(page) so for that we have to clear the interval or stop the previous work, if we don't then it will affect the performance

componentWillUnmount(){
clearInterval()
}

// And in functional component we use useEffect

useEffect(() => {
const timer = setInterval(() => {
console.log("Function Interval");
}, 1000)

        return () => {
            clearInterval(timer)
            console.log("Function Clear");
        }
    }, [])

and return is used to clear up the work.

return ()=>{

}

<!-- Unmounting Process -->

Even when all components are class components, Reactâ€™s unmounting process still traverses backwards.
This order ensures proper cleanup, avoids dependency conflicts, and follows a Last-In-First-Out (LIFO) model.
The behavior is consistent for all types of components in React.

<!-- Constructor() and super() -->

In a React class component like class User extends React.Component, the use of constructor(props) and super(props) is tied to JavaScriptâ€™s class-based inheritance mechanism and helps initialize the component properly. Letâ€™s break down why they are used:

1. constructor(props)
   The constructor method in a class is a special function used to initialize an objectâ€™s state and bind event handlers when a component is created. It is called before the component is mounted.

<!-- Why use constructor(props)? -->

If you need to initialize state or bind custom methods to this, you use a constructor.
The props parameter allows you to access this.props in the constructor. 2. super(props)
super(props) calls the parent classâ€™s constructor, in this case, React.Component. It is required when defining a constructor in a derived class to properly inherit and initialize the componentâ€™s behavior.

<!-- Why is super(props) necessary? -->

Without calling super(props), this would be undefined when trying to access this.props or this.state in the constructor.
super() initializes the React.Component class, allowing the child class to use the methods and properties provided by React.

Key Points

1.super(props) passes the props to the base class (React.Component), ensuring that this.props is correctly initialized.
2.If you define a constructor, you must call super(props) before accessing this in your constructor, or youâ€™ll get an error.

<!-- When Do You Need a Constructor? -->

If you need to set initial state or bind event handlers:

Otherwise, if you donâ€™t use state initialization or custom bindings, you can omit the constructor entirely.

<!-- why can we use async in async componentDidMount(){} -->

We can use async in the componentDidMount() method of a class-based React component because JavaScript supports asynchronous functions within class methods, allowing us to handle asynchronous operations like fetching data from APIs more conveniently.

<!-- Why Use async in componentDidMount()? -->

1.Fetching Data Asynchronously:

componentDidMount() is commonly used to perform side effects, such as making API requests after a component has been mounted to the DOM. These operations are asynchronous, and using async/await simplifies handling them.

2.Cleaner and More Readable Code:

Using async/await avoids deeply nested .then() chains, making the code easier to read and maintain.

<!-- async in componentDidUpdate() -->

Yes, you can use async in componentDidUpdate().
Always conditionally trigger side effects to prevent infinite loops.
componentDidUpdate() is useful for responding to changes in props or state, and async/await makes handling asynchronous tasks more readable.

<!-- Why cannot use async in useEffect as useEffect(async()=>{}) -->

1.This results in a warning or error because useEffect expects a cleanup function or undefined to be returned, and using async makes the function return a Promise instead of a cleanup function. Letâ€™s explore why this happens and how to handle it correctly.

<!-- Why Canâ€™t We Use async Directly in useEffect? -->

- useEffect Expects a Cleanup Function

  1.The callback function you pass to useEffect may return a cleanup function to handle side effects like removing event listeners or clearing timers.
  2.An async function always returns a Promise, not a function.
  This violates the expectation of returning a cleanup function or undefined.

- Returning a Promise Confuses React
  1.React uses the return value of useEffect to know if cleanup is needed. A Promise is not a valid cleanup function.

<!-- Correct Way to Use async with useEffect: -->

Instead of marking the useEffect callback itself as async, define an async function inside the useEffect:

<!-- Single responsibility principle -->

The Single Responsibility Principle (SRP) in software design states that a module, class, or component should have only one reason to change, meaning it should focus on a single responsibility or functionality. In React, SRP can help improve readability, maintainability, and scalability by making components focused on specific tasks.

<!-- Custom hooks -->

- It makes code more readable, modular and more reusable.

<!-- Linters -->

-A linter is a tool that analyzes your code to identify potential errors, enforce coding standards, and suggest improvements. It helps maintain code quality and consistency across a project by catching syntax issues, stylistic errors, and potential bugs before runtime.

<!-- Key Features of Linters -->

Error Detection: Catches syntax and logical errors.
Code Style Enforcement: Ensures adherence to coding conventions (like indentation, naming conventions, etc.).
Warnings for Best Practices: Provides suggestions to improve code readability and performance.

<!-- Dynamic bundling, Chunking, Code splitting, Lazy Loading, On demand Loading, Dynamic import -->

Chunking or dynamic bundling in React (and other modern web applications) refers to the technique of splitting the JavaScript bundle into smaller, more manageable pieces or chunks that are loaded as needed. This technique is crucial for performance optimization and user experience.

<!-- Why Chunking or Dynamic Bundling Is Important in React -->

Improves Initial Load Time (Performance Optimization)

Without chunking, all JavaScript code for the entire application is bundled into one large file. This large file can take a long time to load, increasing the initial page load time.
By splitting the bundle, only the code necessary for rendering the current page or component is loaded initially. Additional chunks are loaded dynamically as the user navigates through the app.

Result: Faster initial rendering and better perceived performance.
Efficient Use of Network Resources

Chunking ensures that only the code relevant to the userâ€™s current action is sent over the network. This reduces unnecessary data transfer.
Example: If a user never visits a certain route, the corresponding JavaScript file for that route wonâ€™t be downloaded.
Code Splitting for Lazy Loading

React supports lazy loading components using React.lazy() and Suspense. This leverages chunking by dynamically importing code only when needed.

<!-- lazy loading -->

Inside lazy() function, import() is also a function.

<!-- CSS -->

<!-- 1. SASS (Syntactically Awesome Stylesheets) -->

Type: CSS Preprocessor
Purpose: Extends CSS with variables, nesting, and more.
Syntax: Indentation-based (older)

<!-- 2. SCSS (Sassy CSS) -->

Type: CSS Preprocessor
Purpose: Same as SASS but uses CSS-like syntax with curly braces and semicolons.
Syntax: CSS-compatible

<!-- 3. Styled Components -->

Type: CSS-in-JS Library for React
Purpose: Write scoped styles as JavaScript variables using template literals.

<!-- 4. Chakra UI -->

Type: React Component Library
Purpose: Provides pre-built, customizable UI components with built-in accessibility and theming.

<!-- 5. Material UI (MUI) -->

Type: React Component Library
Purpose: Implements Googleâ€™s Material Design with ready-to-use components.

<!-- 6. Bootstrap -->

Type: CSS Framework
Purpose: Provides pre-styled components and a responsive grid system.

<!-- 7. Tailwind CSS -->

Type: Utility-First CSS Framework
Purpose: Uses utility classes to style elements directly in HTML/JSX.

<!-- Summary -->

SASS/SCSS are great for custom stylesheets with enhanced CSS features.
Styled Components integrates styles directly with React components.
Chakra UI and Material UI are full-featured component libraries for fast UI development.
Bootstrap provides a simple, responsive grid and pre-styled components.
Tailwind CSS offers a utility-first approach for flexible, atomic design.
Choose based on project needs, customization, and speed requirements.

<!-- Tailwind -->

If you are using m-4 hundred times in the project so it will import one class out of it that is why tailwind is lightweight.

<!-- Higher Order components -->

Higher order component is a function that takes a component enhances and modifies it and returns that back new component

<!-- Lifting the state up -->

In React, lifting state up refers to the pattern of moving state management from child components to their parent component when multiple components need access to the same state. This pattern promotes better data flow and makes it easier to maintain consistency across components.

<!-- props drilling -->

Props drilling in React refers to the process of passing data (via props) from a parent component to deeply nested child components, even if only intermediate components donâ€™t need that data. This happens when you want to share data between components that arenâ€™t directly related.

<!-- useContext -->

useContext is a hook in React that allows components to access and consume context values directly without relying on props drilling. It simplifies the management of global or shared state within a React application.

<!-- When to Use useContext -->

When you need to avoid passing props down multiple levels (props drilling).
When you want to share data globally across deeply nested components.

<!-- UserContext.Consumer / Component.Consumer -->

<Component.Consumer> <Component.Consumer/> in React is a way to consume context values before the introduction of the useContext hook in React 16.8. It allows functional or class components to access values from a context without passing them through props directly.

<!-- When to Use <Component.Consumer> -->

You would use <Component.Consumer> <Component.Consumer/> when working with React versions that do not support hooks or if you prefer using render prop patterns over hooks for consuming context.

Just like useContext we can use as many time we want in class based components.

<!-- UserContext.Provider / Componet.Provider -->

In React, <Component.Provider> <Component.Provider/> is used as part of the Context API to provide a context value to components within its subtree. It allows child components to access shared data without prop drilling (passing props down manually through every component level).

<!-- When to Use <Component.Provider> -->

To share global state (such as user authentication, themes, or language settings) across components.
To avoid passing props down through deeply nested components.

We can modify it in a way such as giving access to required sections or Components

<!-- Redux Toolkit -->

- Install @reduxjs/toolkit and react-redux
- Build our store
- Connect our store to our app
- Slice (CartSlice)
- dispatch(action)
- Selector

<!-- Reducer -->

- A slice reducer can be combination of small reducers.

<!-- Slice Reducers -->

Vanilla(older) Redux => Don't mutate state, returning was mandatory

const newState = [...state]
newState.items.push(action.payload)
return newState

- Redux Toolkit
  We have to mutate the state

Redux Toolkit is creating immutable state on its own bts but not asking developers to do it.

<!-- Immer -->

- The Immer library is a JavaScript library that simplifies handling immutable state by allowing you to work with state using a mutable syntax. Immer automatically creates the immutable state for you under the hood, so you donâ€™t have to worry about manually cloning and updating nested structures.

- Redux Toolkit is using Immer bts(behind the scenes) for us.

 <!-- Types of testing (Developer)-->

- Unit Testing (Unit testing is testing one component out of your project in isolation environment)
- Integration Testing
- End To End testing - E2E Testing

## Setting up Testing in our app.

## <!-- React Testing Library -->

- React Testing library builds on top of DOM testing library by adding APIs for working with React Components.

- Project created with Create React App alredy have React Testing Library init.

- React Testing Library uses Jest.js, Jest is a delightful javascript testing framework, and jest is being used along with babel so we need to add additional babel dependencies

- React Testing Library command : npm i -D @testing-library/react

- Jest Install command : npm i -D jest

- babel dependencies: npm install --save-dev babel-jest @babel/core @babel/preset-env

- now configure babel: configure code in the jest web.

- Parcel uses babel and has its own configuration in our code and now we are trying to install babel for jest which will conflict so we have to change parcel's behaviour.

While Parcel includes transpilation by default, you may still need to use Babel with other tools such as test runners like Jest, and linters like ESLint. If this is the case, you may not be able to completely remove your Babel config. You can make Parcel ignore your Babel config instead.

- Once .parcelrc is created the parcel's babel will not conflict and our babel.config.js will be used.

- Now we have to make a jest configuration. Command: npx jest --init

- jsdom - when we write test cases we don't run them on browsers so they need a environment so jsdom is like a browser which give features like browser but not a browser, It parses and interacts with assembled HTML just like a browser where we can run the test cases.

- jsdom library: npm install --save-dev jest-environment-jsdom or npm i -D jest-environment-jsdom

<!-- test folder name -->

main folder __tests__

__tests__ two underscore(__) at the start and in the end is known as dunder method.

- Any file inside this folder will be testing files and the naming convention should be .test.js/.test.ts/.jest.js/.jest.ts

.js is javascript and ts is typescript.

- when we try to write jsx code in jsdom it won't work so we have to install babel/preset-react so command is : npm i -D @babel/preset-react now we have to include @babel/preset-react inside our babel.config.js like this ['@babel/preset-react', { runtime: "automatic" }]

- now we have to install @testing-library/jest-dom : npm i -D @testing-library/jest-dom

<!-- describe -->

describe("",()=>{
test()
test()
test()
it()
it()
it()
})

It is for grouping of test cases just a convention, we can use many describe in the test case and we can use describe inside describe.

When we test our cases we can use test("",()=>) or it("",()=>) both are same, "it" is used because the comment on the it("should do this",()=>{}) is now readable and comment convention starts with should.
